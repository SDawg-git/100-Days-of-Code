# -*- coding: utf-8 -*-
"""Space_Missions_Analysis_(start).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X-EbX0AKDprtd84SUAAy3EW5BgMSX7qU

# Introduction

<center><img src="https://i.imgur.com/9hLRsjZ.jpg" height=400></center>

This dataset was scraped from [nextspaceflight.com](https://nextspaceflight.com/launches/past/?page=1) and includes all the space missions since the beginning of Space Race between the USA and the Soviet Union in 1957!

### Install Package with Country Codes
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install iso3166

"""### Upgrade Plotly

Run the cell below if you are working with Google Colab.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade plotly

"""### Import Statements"""

import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# These might be helpful:
from iso3166 import countries
from datetime import datetime, timedelta

"""### Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

"""### Load the Data"""

df_data = pd.read_csv('mission_launches.csv')

"""# Preliminary Data Exploration

* What is the shape of `df_data`?
* How many rows and columns does it have?
* What are the column names?
* Are there any NaN values or duplicates?
"""

df_data.shape #4324 rows, 9 columns
df_data.columns
df_data.head()

df_data.isna().sum()    #3360 NaN values in Price
df_data.duplicated().sum()    #0 duplicates

"""## Data Cleaning - Check for Missing Values and Duplicates

Consider removing columns containing junk data.
"""

df_data.dropna(inplace=True)
df_data.drop_duplicates(inplace=True)   #removing the NaN values

df_data.isna().sum()

"""## Descriptive Statistics"""

df_data.describe()

df_data.info()

"""# Number of Launches per Company

Create a chart that shows the number of space mission launches by organisation.
"""

df_data['Organisation'].value_counts()

df_data['Organisation'].value_counts().plot(kind='bar')

"""# Number of Active versus Retired Rockets

How many rockets are active compared to those that are decomissioned?
"""

df_data['Rocket_Status'].value_counts()

df_data['Rocket_Status'].value_counts().plot(kind='bar')

"""# Distribution of Mission Status

How many missions were successful?
How many missions failed?
"""

df_data['Mission_Status'].value_counts()

df_data['Mission_Status'].value_counts().plot(kind='bar')

"""# How Expensive are the Launches?

Create a histogram and visualise the distribution. The price column is given in USD millions (careful of missing values).
"""

plt.figure(figsize=(12,6))
ax = df_data['Price'].hist(bins=20)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""# Use a Choropleth Map to Show the Number of Launches by Country

* Create a choropleth map using [the plotly documentation](https://plotly.com/python/choropleth-maps/)
* Experiment with [plotly's available colours](https://plotly.com/python/builtin-colorscales/). I quite like the sequential colour `matter` on this map.
* You'll need to extract a `country` feature as well as change the country names that no longer exist.

Wrangle the Country Names

You'll need to use a 3 letter country code for each country. You might have to change some country names.

* Russia is the Russian Federation
* New Mexico should be USA
* Yellow Sea refers to China
* Shahrud Missile Test Site should be Iran
* Pacific Missile Range Facility should be USA
* Barents Sea should be Russian Federation
* Gran Canaria should be USA


You can use the iso3166 package to convert the country names to Alpha3 format.
"""

df_data["Country"] = df_data["Location"].apply(lambda x: x.split(",")[-1].strip())

replacements = {
    "New Mexico": "USA",
    "Yellow Sea": "China",
    "Shahrud Missile Test Site": "Iran",
    "Pacific Missile Range Facility": "USA",
    "Barents Sea": "Russian Federation",
    "Gran Canaria": "USA",
    "Russia": "Russian Federation"
}

df_data["Country"] = df_data["Country"].replace(replacements)

manual_iso_map = {
    "USA": "USA",
    "China": "CHN",
    "Iran": "IRN",
    "Russian Federation": "RUS",
    "India": "IND",
    "Japan": "JPN",
    "Israel": "ISR",
    "North Korea": "PRK",
    "South Korea": "KOR",
    "New Zealand": "NZL",
    "Kazakhstan": "KAZ",
    "France": "FRA",
    "Brazil": "BRA",
    "Australia": "AUS",
    "United Kingdom": "GBR",
    "Italy": "ITA",
    "Pakistan": "PAK",
    "Canada": "CAN"
}

df_data["Country_Code"] = df_data["Country"].map(manual_iso_map)
df_cleaned = df_data.dropna(subset=["Country_Code"])


launch_counts = df_cleaned["Country_Code"].value_counts().reset_index()
launch_counts.columns = ["Country_Code", "Launches"]

"""# Use a Choropleth Map to Show the Number of Failures by Country

"""

fig = px.choropleth(
    launch_counts,
    locations="Country_Code",
    color="Launches",
    color_continuous_scale="matter",
    projection="natural earth",
    title="Number of Launches by Country"
)
fig.show()



"""# Create a Plotly Sunburst Chart of the countries, organisations, and mission status."""

fig = px.sunburst(
    df_data,
    path=['Country', 'Organisation', 'Mission_Status'],
    title="Mission Status by Country and Organisation",
    color='Mission_Status',
)

fig.update_layout(
    margin=dict(t=50, l=0, r=0, b=0)
)

fig.show()

"""# Analyse the Total Amount of Money Spent by Organisation on Space Missions"""

df_data['Price'] = pd.to_numeric(df_data['Price'], errors='coerce')

organisation_costs = df_data.groupby('Organisation', as_index=False)['Price'].sum()

organisation_costs = organisation_costs.sort_values(by='Price', ascending=False)

fig = px.bar(
    organisation_costs,
    x='Organisation',
    y='Price',
    title='Total Spent by on Space Missions by Org',
    labels={'Price': 'Total Cost (in Millions or as per dataset)'},
    color='Price',
)

fig.update_layout(xaxis_tickangle=-45)
fig.show()

"""# Analyse the Amount of Money Spent by Organisation per Launch"""

df_data['Price'] = pd.to_numeric(df_data['Price'], errors='coerce')

org_summary = df_data.groupby('Organisation').agg(
    total_spent=pd.NamedAgg(column='Price', aggfunc='sum'),
    num_launches=pd.NamedAgg(column='Price', aggfunc='count')
).reset_index()

org_summary['avg_cost_per_launch'] = org_summary['total_spent'] / org_summary['num_launches']

org_summary = org_summary.sort_values(by='avg_cost_per_launch', ascending=False)

fig = px.bar(
    org_summary,
    x='Organisation',
    y='avg_cost_per_launch',
    title='Average Cost per Launch by Organisation',
    labels={'avg_cost_per_launch': 'Avg. Cost per Launch'},
    color='avg_cost_per_launch',
)

fig.update_layout(xaxis_tickangle=-45)
fig.show()

"""# Chart the Number of Launches per Year"""

df_data['Date'] = pd.to_datetime(df_data['Date'], errors='coerce')

df_data['Year'] = df_data['Date'].dt.year

launches_per_year = df_data['Year'].value_counts().sort_index().reset_index()
launches_per_year.columns = ['Year', 'Launch Count']

fig = px.line(
    launches_per_year,
    x='Year',
    y='Launch Count',
    title='Number of Launches per Year',
    markers=True,
    line_shape='spline'
)

fig.update_layout(
    xaxis_title='Year',
    yaxis_title='Number of Launches',
    template='plotly_white'
)

fig.show()

"""# Chart the Number of Launches Month-on-Month until the Present

Which month has seen the highest number of launches in all time? Superimpose a rolling average on the month on month time series chart.
"""

df_data['YearMonth'] = df_data['Date'].dt.to_period('M').astype(str)

monthly_launches = df_data['YearMonth'].value_counts().sort_index().reset_index()
monthly_launches.columns = ['YearMonth', 'Launch Count']

fig = px.line(
    monthly_launches,
    x='YearMonth',
    y='Launch Count',
    title='Number of Launches Month-on-Month',
    markers=True
)

fig.update_layout(
    xaxis_title='Month',
    yaxis_title='Number of Launches',
    template='plotly_white',
    xaxis=dict(tickangle=45)
)

fig.show()

"""# Launches per Month: Which months are most popular and least popular for launches?

Some months have better weather than others. Which time of year seems to be best for space missions?
"""

df_data['Month'] = df_data['Date'].dt.month_name()

month_counts = df_data['Month'].value_counts().reindex([
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
]).reset_index()

month_counts.columns = ['Month', 'Launch Count']

fig = px.bar(
    month_counts,
    x='Month',
    y='Launch Count',
    title='Launches per Calendar Month',
    text='Launch Count',
    labels={'Launch Count': 'Number of Launches'},
    color='Launch Count',
    color_continuous_scale='matter'
)

fig.update_traces(textposition='outside')
fig.update_layout(template='plotly_white', xaxis_title='Month', yaxis_title='Launches')

fig.show()

"""# How has the Launch Price varied Over Time?

Create a line chart that shows the average price of rocket launches over time.
"""

df_price = df_data[df_data['Price'].notnull() & (df_data['Price'] > 0)]
df_price = df_price.sort_values(by='Date')

fig = px.scatter(
    df_price,
    x='Date',
    y='Price',
    color='Organisation',
    title='Launch Price Variation Over Time',
    labels={'Price': 'Launch Price (in million USD)'},
    hover_data=['Mission', 'Country', 'Status Mission'],
    template='plotly_white'
)

fig.update_traces(marker=dict(size=6), selector=dict(mode='markers'))
fig.update_layout(xaxis_title='Date', yaxis_title='Launch Price')

fig.show()

"""# Chart the Number of Launches over Time by the Top 10 Organisations.

How has the dominance of launches changed over time between the different players?
"""

top_orgs = df_data['Organisation'].value_counts().nlargest(10).index.tolist()
df_top_orgs = df_data[df_data['Organisation'].isin(top_orgs)]

launch_counts = df_top_orgs.groupby(['Year', 'Organisation']).size().reset_index(name='Launches')

fig = px.line(
    launch_counts,
    x='Year',
    y='Launches',
    color='Organisation',
    title='Launches Over Time by Top 10 Organisations',
    markers=True,
    template='plotly_dark'
)

fig.update_layout(xaxis_title='Year', yaxis_title='Number of Launches')
fig.show()

"""# Cold War Space Race: USA vs USSR

The cold war lasted from the start of the dataset up until 1991.
"""

cold_war_df = df_data[df_data['Country'].isin(['USA', 'Russian Federation'])]
launch_counts = cold_war_df.groupby(['Year', 'Country']).size().reset_index(name='Launches')

fig = px.line(
    launch_counts,
    x='Year',
    y='Launches',
    color='Country',
    markers=True,
    title='Cold War Space Race: USA vs USSR (Russian Federation)',
    template='plotly_dark'
)

fig.update_layout(xaxis_title='Year', yaxis_title='Number of Launches')
fig.show()

"""## Create a Plotly Pie Chart comparing the total number of launches of the USSR and the USA

Hint: Remember to include former Soviet Republics like Kazakhstan when analysing the total number of launches.
"""

filtered_df = df_data[df_data['Country'].isin(['USA', 'Russian Federation'])]
launch_counts = filtered_df['Country'].value_counts().reset_index()
launch_counts.columns = ['Country', 'Launches']

fig = px.pie(
    launch_counts,
    values='Launches',
    names='Country',
    title='Total Number of Launches: USA vs USSR (Russian Federation)',
)

fig.update_traces(textinfo='percent+label')
fig.show()

"""## Create a Chart that Shows the Total Number of Launches Year-On-Year by the Two Superpowers"""

superpowers_df = df_data[df_data['Country'].isin(['USA', 'Russian Federation'])]
superpowers_df['Year'] = superpowers_df['Date'].dt.year
launches_per_year = superpowers_df.groupby(['Year', 'Country']).size().reset_index(name='Launches')

fig = px.line(
    launches_per_year,
    x='Year',
    y='Launches',
    color='Country',
    title='Total Number of Launches per Year: USA vs USSR (Russian Federation)',
    markers=True,
    color_discrete_map={'USA': 'blue', 'Russian Federation': 'red'}
)

fig.update_layout(xaxis=dict(dtick=5))  # Adjust tick frequency
fig.show()

"""## Chart the Total Number of Mission Failures Year on Year."""

failures_df = df_data[df_data['Mission_Status'].str.lower().str.contains('failure')]
failures_df['Year'] = failures_df['Date'].dt.year
failures_per_year = failures_df.groupby('Year').size().reset_index(name='Failures')

fig = px.bar(
    failures_per_year,
    x='Year',
    y='Failures',
    title='Total Number of Mission Failures Year-on-Year',
    labels={'Failures': 'Number of Failures'},
    template='plotly_dark'
)

fig.update_layout(xaxis=dict(dtick=2))
fig.show()

"""## Chart the Percentage of Failures over Time

Did failures go up or down over time? Did the countries get better at minimising risk and improving their chances of success over time?
"""

df_data['Year'] = df_data['Date'].dt.year

total_launches_per_year = df_data.groupby('Year').size()

failures_per_year = df_data[df_data['Mission_Status'].str.lower().str.contains('failure')].groupby('Year').size()
failure_rate = (failures_per_year / total_launches_per_year * 100).reset_index(name='Failure Rate (%)')
failure_rate.columns = ['Year', 'Failure Rate (%)']
failure_rate = failure_rate.fillna(0)

fig = px.line(
    failure_rate,
    x='Year',
    y='Failure Rate (%)',
    title='Percentage of Mission Failures Over Time',
    markers=True,
    template='plotly_dark'
)

fig.update_layout(yaxis_title="Failure Rate (%)", xaxis_title="Year")
fig.show()

"""# For Every Year Show which Country was in the Lead in terms of Total Number of Launches up to and including including 2020)

Do the results change if we only look at the number of successful launches?
"""

df_filtered = df_data[df_data['Year'] <= 2020]

launch_counts = df_filtered.groupby(['Year', 'Country']).size().reset_index(name='Launches')
leading_countries = launch_counts.sort_values(['Year', 'Launches'], ascending=[True, False]).drop_duplicates('Year')

fig = px.bar(
    leading_countries,
    x='Year',
    y='Launches',
    color='Country',
    title='Leading Country per Year by Total Number of Launches (Up to 2020)',
    text='Country',
    template='plotly_white'
)

fig.update_traces(textposition='outside')
fig.update_layout(xaxis_title='Year', yaxis_title='Number of Launches')
fig.show()

"""# Create a Year-on-Year Chart Showing the Organisation Doing the Most Number of Launches

Which organisation was dominant in the 1970s and 1980s? Which organisation was dominant in 2018, 2019 and 2020?
"""

df_data['Date'] = pd.to_datetime(df_data['Date'], errors='coerce')

df_data = df_data.dropna(subset=['Date'])

df_data['Year'] = df_data['Date'].dt.year

launch_counts = df_data.groupby(['Year', 'Organisation']).size().reset_index(name='Launches')

top_orgs_per_year = launch_counts.loc[launch_counts.groupby('Year')['Launches'].idxmax()]

fig = px.bar(top_orgs_per_year,
             x='Year',
             y='Launches',
             color='Organisation',
             title='Top Launching Organisation per Year',
             text='Organisation')

fig.update_layout(xaxis_title='Year',
                  yaxis_title='Number of Launches',
                  legend_title='Organisation')

fig.show()
